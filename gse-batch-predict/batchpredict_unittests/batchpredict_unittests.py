import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
import shutil
import unittest
import yaml
from batchpredict import ModelNotFoundError
from batchpredict import validate_model_location

np.random.seed(2)


class TestBatchPredict(unittest.TestCase):
    @classmethod
    def setUpClass(self):
        """Overrides setUpClass from unittest to create artifacts for testing"""
        # Read config file for unittesting
        with open("./test_config.yaml", "r") as file:
            self.config = yaml.load(file, Loader=yaml.FullLoader)

        # Define input arguments for unittesting
        self.dummy_loc = self.config["model_loc"]

        # Run batch predict script on two sample images for unit testing
        os.system(self.config["test_command"])

        # Read count and label files for unit testing
        with open(self.config["run_dir"] + "/counts/bus_counts.txt") as file:
            self.img1_counts = [line.rstrip() for line in file]
        with open(self.config["run_dir"] + "/counts/zidane_counts.txt") as file:
            self.img2_counts = [line.rstrip() for line in file]
        with open(self.config["run_dir"] + "/labels/bus.txt") as file:
            self.img1_labels = [line.rstrip() for line in file]
        with open(self.config["run_dir"] + "/labels/zidane.txt") as file:
            self.img2_labels = [line.rstrip() for line in file]

    def test_model_not_found_error(self):
        """Checks for ModelNotFoundError if the trained model file does not exist at the specified location"""
        with self.assertRaises(ModelNotFoundError):
            validate_model_location(self.dummy_loc)

    def test_output_format(self):
        """Checks if the output files are in the correct format"""
        self.assertTrue(os.path.exists(self.config["run_dir"] + "/bus.jpg"), None)
        self.assertTrue(os.path.exists(self.config["run_dir"] + "/zidane.jpg"), None)
        self.assertTrue(
            os.path.exists(self.config["run_dir"] + "/counts/bus_counts.txt"), None
        )
        self.assertTrue(
            os.path.exists(self.config["run_dir"] + "/counts/zidane_counts.txt"), None
        )
        self.assertTrue(
            os.path.exists(self.config["run_dir"] + "/labels/bus.txt"), None
        )
        self.assertTrue(
            os.path.exists(self.config["run_dir"] + "/labels/zidane.txt"), None
        )

    def test_obj_counts(self):
        """Checks if object counts generated by the model are as expected"""
        self.assertEqual(self.img1_counts, ["person: 4", "bus: 1"])
        self.assertEqual(self.img2_counts, ["person: 2", "tie: 2"])

    def test_bb_labels(self):
        """Checks if the bounding box coordinates and labels are correct"""
        self.assertEqual(
            self.img1_labels,
            [
                "0 0.0419753 0.660648 0.0839506 0.299074 0.534942",
                "5 0.508025 0.468519 0.983951 0.524074 0.849334",
                "0 0.183333 0.602778 0.245679 0.483333 0.851563",
                "0 0.35 0.590278 0.154321 0.425 0.870248",
                "0 0.914815 0.589352 0.17037 0.447222 0.896172",
            ],
        )
        self.assertEqual(
            self.img2_labels,
            [
                "27 0.782812 0.506944 0.0359375 0.141667 0.261517",
                "0 0.327344 0.634028 0.4625 0.731944 0.666693",
                "27 0.366797 0.796528 0.0429688 0.379167 0.675119",
                "0 0.736328 0.533333 0.311719 0.933333 0.879861",
            ],
        )

    @classmethod
    def tearDownClass(self):
        """Deletes artiacts generated by unittests"""
        os.remove(self.config["yolo_loc"])
        shutil.rmtree("runs")
